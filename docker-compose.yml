version: "3.9"

services:
  kong:
    image: kong:2.5.0-alpine
    hostname: kong
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yml"
      command: "kong start"
    ports:
      - "80:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./infrastructure-config:/opt/kong
    depends_on:
      - mongo
    networks:
      - magic-trust

  rabbitmq:
    # image: rabbitmq:3-management-alpine
    image: heidiks/rabbitmq-delayed-message-exchange:latest
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - magic-trust

  mongo:
    image: mongo
    container_name: mongo-magictrust
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

    depends_on:
      - rabbitmq
    ports:
      - 27018:27017
    networks:
      - magic-trust

  magictrust-bouncer:
    environment:
      MQ_URI: amqp://admin:admin@rabbitmq:5672/
      MONGODB_URI: mongodb://root:example@mongo:27017/
      AWS_ACCESS_KEY_ID: AKIA3F3NJ3PQJ7MJBGO6
      AWS_SECRET_ACCESS_KEY: Zoqq8+DeGQ3B+7XkwVr0RK4aH3PFWn0sVG+XX3pE
    build: ./services/bouncer/.
    restart: always
    ports:
      - 3001
    depends_on:
      - mongo
    entrypoint:
      - dockerize
      - -timeout
      - 60s
      - -wait
      - tcp://rabbitmq:15672
    command: ./main
    networks:
      - magic-trust

  magictrust-catcher:
    environment:
      MQ_URI: amqp://admin:admin@rabbitmq:5672/
      MONGODB_URI: mongodb://root:example@mongo:27017/
      AWS_ACCESS_KEY_ID: AKIA3F3NJ3PQJ7MJBGO6
      AWS_SECRET_ACCESS_KEY: Zoqq8+DeGQ3B+7XkwVr0RK4aH3PFWn0sVG+XX3pE
    build: ./services/catcher/.
    restart: always
    ports:
      - 3002
    depends_on:
      - mongo
    entrypoint:
      - dockerize
      - -timeout
      - 60s
      - -wait
      - tcp://rabbitmq:15672
    command: ./main
    networks:
      - magic-trust

  magictrust-creator:
    environment:
      MQ_URI: amqp://admin:admin@rabbitmq:5672/
      MONGODB_URI: mongodb://root:example@mongo:27017/
    build: ./services/creator/.
    restart: always
    ports:
      - 3003
    depends_on:
      - mongo
    entrypoint:
      - dockerize
      - -timeout
      - 60s
      - -wait
      - tcp://rabbitmq:15672
    command: node ./dist/app.js
    networks:
      - magic-trust

  magictrust-checker:
    environment:
      MQ_URI: amqp://admin:admin@rabbitmq:5672/
      MONGODB_URI: mongodb://root:example@mongo:27017/
    build: ./services/checker/.
    restart: always
    ports:
      - 3003
    depends_on:
      - mongo
    entrypoint:
      - dockerize
      - -timeout
      - 60s
      - -wait
      - tcp://rabbitmq:15672
    command: node ./dist/app.js
    networks:
      - magic-trust

  magictrust-super-bouncer:
    environment:
      MQ_URI: amqp://admin:admin@rabbitmq:5672/
      MONGODB_URI: mongodb://root:example@mongo:27017/
    build: ./services/superBouncer/.
    restart: always
    ports:
      - 3005
    depends_on:
      - mongo
    entrypoint:
      - dockerize
      - -timeout
      - 60s
      - -wait
      - tcp://rabbitmq:15672
    command: node ./dist/app.js
    networks:
      - magic-trust

  magictrust-reporter:
    environment:
      MQ_URI: amqp://admin:admin@rabbitmq:5672/
      MONGODB_URI: mongodb://root:example@mongo:27017/
    build: ./services/reporter/.
    restart: always
    ports:
      - 3004
    depends_on:
      - mongo
    entrypoint:
      - dockerize
      - -timeout
      - 60s
      - -wait
      - tcp://rabbitmq:15672
    command: ./main
    networks:
      - magic-trust

  magictrust-swagger:
    build: ./services/swagger/.
    restart: always
    ports:
      - 3010
    networks:
      - magic-trust

networks:
  magic-trust:
    driver: bridge
volumes:
  data1-1:
  data1-2:
